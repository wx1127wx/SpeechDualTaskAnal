#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Thu Jul 20 19:31:49 2023"
echo "(version 7.12, April 14, 2020)"
echo "execution started: `date`"

# to execute via tcsh: 
#   tcsh -xef proc.default_subid |& tee output.proc.default_subid
# to execute via bash: 
#   tcsh -xef proc.default_subid 2>&1 | tee output.proc.default_subid

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 27 Jun 2019
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 27 Jun 2019)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj_dir = $argv[1]
    set subj = `basename $subj_dir`
else
    set subj_dir = ${PWD}/default_subid
    set subj = default_subid
endif

# stim files
if ( $#argv > 1 ) then
    set timing_dir = $argv[2]
else
    set timing_dir = ${PWD}/timing_file/${subj}
endif

# assign output directory name
if ( $#argv > 2 ) then
    set output_dir = $argv[3]
else
    set output_dir = ${PWD}/results/$subj.results
endif

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 3`)
echo $output_dir

# create results and stimuli directories
mkdir -p $output_dir/stimuli

# copy stim files into stimulus directory
cp ${timing_dir}/timing_base.txt \
    ${timing_dir}/timing_dt1.txt \
    ${timing_dir}/timing_dt2.txt \
    ${timing_dir}/timing_dt3.txt \
    ${timing_dir}/timing_dt4.txt \
    $output_dir/stimuli

# copy anatomy to results dir
3dcopy                                                                                                                                                        \
    ${subj_dir}/anat/T1W_3D_MPRAGE_1mm_SENSE.nii.gz \
    $output_dir/T1W_3D_MPRAGE_1mm_SENSE

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir,
# while removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat \
    ${subj_dir}/func/DDKDT_run1_SENSE.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat \
    ${subj_dir}/func/DDKDT_run2_SENSE.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r03.tcat \
    ${subj_dir}/func/DDKDT_run3_SENSE.nii.gz'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 189 189 189 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 3 -legendre                     \
                pb00.$subj.r$run.tcat+orig > outcount.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# get run number and TR index for minimum outlier volume
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       \
                          -index_to_run_tr $minindex` )
# save run and TR indices for extraction of vr_base_min_outlier
set minoutrun = $ovals[1]
set minouttr  = $ovals[2]
echo "min outlier: run $minoutrun, TR $minouttr" | tee out.min_outlier.txt

# ================================= tshift =================================
# time shift data so all slice timing is the same 
foreach run ( $runs )
    3dTshift -tzero 0 -quintic -prefix pb01.$subj.r$run.tshift \
             pb00.$subj.r$run.tcat+orig
end

# --------------------------------
# extract volreg registration base
3dbucket -prefix vr_base_min_outlier                           \
    pb01.$subj.r$minoutrun.tshift+orig"[$minouttr]"

# ================================= align ==================================
# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be intermediate, stripped, T1W_3D_MPRAGE_1mm_SENSE_ns+orig)
align_epi_anat.py -anat2epi -anat T1W_3D_MPRAGE_1mm_SENSE+orig \
       -save_skullstrip -suffix _al_junk                       \
       -epi vr_base_min_outlier+orig -epi_base 0               \
       -epi_strip 3dAutomask                                   \
       -giant_move                                             \
       -volreg off -tshift off

# ================================== tlrc ==================================
# warp anatomy to standard space
@auto_tlrc -base MNI_avg152T1+tlrc -input T1W_3D_MPRAGE_1mm_SENSE_ns+orig \
             -no_ss                                                       \
             -init_xform AUTO_CENTER

# store forward transformation matrix in a text file
cat_matvec T1W_3D_MPRAGE_1mm_SENSE_ns+tlrc::WARP_DATA -I > warp.anat.Xat.1D

# ================================= volreg =================================
# align each dset to base volume, to anat, warp to tlrc space

# verify that we have a +tlrc warp dataset
if ( ! -f T1W_3D_MPRAGE_1mm_SENSE_ns+tlrc.HEAD ) then
    echo "** missing +tlrc warp dataset:                        \
        T1W_3D_MPRAGE_1mm_SENSE_ns+tlrc.HEAD" 
    exit
endif

# register and warp
foreach run ( $runs )
    # register each volume to the base image
    3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig    \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run \
             -cubic                                             \
             -1Dmatrix_save mat.r$run.vr.aff12.1D               \
             pb01.$subj.r$run.tshift+orig

    # create an all-1 dataset to mask the extents of the warp
    3dcalc -overwrite -a pb01.$subj.r$run.tshift+orig -expr 1   \
           -prefix rm.epi.all1

    # catenate volreg/epi2anat/tlrc xforms
    cat_matvec -ONELINE                                         \
               T1W_3D_MPRAGE_1mm_SENSE_ns+tlrc::WARP_DATA -I    \
               T1W_3D_MPRAGE_1mm_SENSE_al_junk_mat.aff12.1D -I  \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform: volreg/epi2anat/tlrc
    3dAllineate -base T1W_3D_MPRAGE_1mm_SENSE_ns+tlrc           \
                -input pb01.$subj.r$run.tshift+orig             \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D         \
                -mast_dxyz 2.5                                  \
                -prefix rm.epi.nomask.r$run

    # warp the all-1 dataset for extents masking 
    3dAllineate -base T1W_3D_MPRAGE_1mm_SENSE_ns+tlrc           \
                -input rm.epi.all1+orig                         \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D         \
                -mast_dxyz 2.5 -final NN -quiet                 \
                -prefix rm.epi.1.r$run

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+tlrc
end

# make a single file of registration params
cat dfile.r*.1D > dfile_rall.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+tlrc
# (this is a mask of voxels that have valid data at every TR)
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r*.HEAD 
3dcalc -a rm.epi.mean+tlrc -expr 'step(a-0.999)' -prefix mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
    3dcalc -a rm.epi.nomask.r$run+tlrc -b mask_epi_extents+tlrc \
           -expr 'a*b' -prefix pb02.$subj.r$run.volreg
end

# warp the volreg base EPI dataset to make a final version
cat_matvec -ONELINE                                             \
           T1W_3D_MPRAGE_1mm_SENSE_ns+tlrc::WARP_DATA -I        \
           T1W_3D_MPRAGE_1mm_SENSE_al_junk_mat.aff12.1D -I  >   \
           mat.basewarp.aff12.1D

3dAllineate -base T1W_3D_MPRAGE_1mm_SENSE_ns+tlrc               \
            -input vr_base_min_outlier+orig                     \
            -1Dmatrix_apply mat.basewarp.aff12.1D               \
            -mast_dxyz 2.5                                      \
            -prefix final_epi_vr_base_min_outlier

# create an anat_final dataset, aligned with stats
3dcopy T1W_3D_MPRAGE_1mm_SENSE_ns+tlrc anat_final.$subj

# record final registration costs
3dAllineate -base final_epi_vr_base_min_outlier+tlrc -allcostX  \
            -input anat_final.$subj+tlrc |& tee out.allcostX.txt

# -----------------------------------------
# warp anat follower datasets (affine)
3dAllineate -source T1W_3D_MPRAGE_1mm_SENSE+orig                \
            -master anat_final.$subj+tlrc                       \
            -final wsinc5 -1Dmatrix_apply warp.anat.Xat.1D      \
            -prefix anat_w_skull_warped

# ================================== blur ==================================
# blur each volume of each run
foreach run ( $runs )
    3dmerge -1blur_fwhm 4.0 -doall -prefix pb03.$subj.r$run.blur \
            pb02.$subj.r$run.volreg+tlrc
end

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -prefix rm.mask_r$run pb03.$subj.r$run.blur+tlrc
end

# create union of inputs, output type is byte
3dmask_tool -inputs rm.mask_r*+tlrc.HEAD -union -prefix full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+tlrc ----
#      (resampled from tlrc anat)
3dresample -master full_mask.$subj+tlrc -input                        \
           T1W_3D_MPRAGE_1mm_SENSE_ns+tlrc                            \
           -prefix rm.resam.anat

# convert to binary anat mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+tlrc  \
            -prefix mask_anat.$subj

# compute tighter EPI mask by intersecting with anat mask
3dmask_tool -input full_mask.$subj+tlrc mask_anat.$subj+tlrc          \
            -inter -prefix mask_epi_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+tlrc mask_anat.$subj+tlrc    \
            |& tee out.mask_ae_overlap.txt

# note Dice coefficient of masks, as well
3ddot -dodice full_mask.$subj+tlrc mask_anat.$subj+tlrc               \
      |& tee out.mask_ae_dice.txt

# ---- create group anatomy mask, mask_group+tlrc ----
#      (resampled from tlrc base anat, MNI_avg152T1+tlrc)
3dresample -master full_mask.$subj+tlrc -prefix ./rm.resam.group      \
           -input /home/medicalimage_admin/Applications/afni/MNI_avg152T1+tlrc

# convert to binary group mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.group+tlrc \
            -prefix mask_group

# note Dice coefficient of anat and template masks
3ddot -dodice mask_anat.$subj+tlrc mask_group+tlrc                    \
      |& tee out.mask_at_dice.txt

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach run ( $runs )
    3dTstat -prefix rm.mean_r$run pb03.$subj.r$run.blur+tlrc
    3dcalc -a pb03.$subj.r$run.blur+tlrc -b rm.mean_r$run+tlrc \
           -c mask_epi_extents+tlrc                            \
           -expr 'c * min(200, a/b*100)*step(a)*step(b)'       \
           -prefix pb04.$subj.r$run.scale
end

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 3                            \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (just to have)
1d_tool.py -infile dfile_rall.1D -set_nruns 3                            \
           -derivative -demean -write motion_deriv.1D

# convert motion parameters for per-run regression
1d_tool.py -infile motion_demean.1D -set_nruns 3                         \
           -split_into_pad_runs mot_demean

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile_rall.1D -set_nruns 3                            \
    -show_censor_count -censor_prev_TR                                   \
    -censor_motion 2 motion_${subj}

# note TRs that were not censored
set ktrs = `1d_tool.py -infile motion_${subj}_censor.1D                  \
                       -show_trs_uncensored encoded`

# ------------------------------
# run the regression analysis
3dDeconvolve -input pb04.$subj.r*.scale+tlrc.HEAD                        \
    -censor motion_${subj}_censor.1D                                     \
    -ortvec mot_demean.r01.1D mot_demean_r01                             \
    -ortvec mot_demean.r02.1D mot_demean_r02                             \
    -ortvec mot_demean.r03.1D mot_demean_r03                             \
    -polort 3 -float                                                     \
    -num_stimts 5                                                        \
    -stim_times_AM2 1 stimuli/timing_base.txt 'dmBLOCK'                  \
    -stim_label 1 base                                                   \
    -stim_times_AM2 2 stimuli/timing_dt1.txt 'dmBLOCK'                   \
    -stim_label 2 dt1                                                    \
    -stim_times_AM2 3 stimuli/timing_dt2.txt 'dmBLOCK'                   \
    -stim_label 3 dt2                                                    \
    -stim_times_AM2 4 stimuli/timing_dt3.txt 'dmBLOCK'                   \
    -stim_label 4 dt3                                                    \
    -stim_times_AM2 5 stimuli/timing_dt4.txt 'dmBLOCK'                   \
    -stim_label 5 dt4                                                    \
    -jobs 4                                                              \
    -gltsym 'SYM: dt1 -base'                                             \
    -glt_label 1 dt1-base                                                \
    -gltsym 'SYM: dt2 -base'                                             \
    -glt_label 2 dt2-base                                                \
    -gltsym 'SYM: dt1 -dt3'                                              \
    -glt_label 3 dt1-dt3                                                 \
    -gltsym 'SYM: dt2 -dt4'                                              \
    -glt_label 4 dt2-dt4                                                 \
    -gltsym 'SYM: dt1 -base -dt3'                                        \
    -glt_label 5 dt1-base-dt3                                            \
    -gltsym 'SYM: dt2 -base -dt4'                                        \
    -glt_label 6 dt2-base-dt4                                            \
    -gltsym 'SYM: dt1 -dt3 -base'                                        \
    -glt_label 7 dt1-dt3-base                                            \
    -gltsym 'SYM: dt2 -dt4 -base'                                        \
    -glt_label 8 dt2-dt4-base                                            \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                              \
    -x1D_uncensored X.nocensor.xmat.1D                                   \
    -fitts fitts.$subj                                                   \
    -errts errts.${subj}                                                 \
    -bucket stats.$subj


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pairwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# display degrees of freedom info from X-matrix
1d_tool.py -show_df_info -infile X.xmat.1D |& tee out.df_info.txt

# -- execute the 3dREMLfit script, written by 3dDeconvolve --
tcsh -x stats.REML_cmd 

# if 3dREMLfit fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dREMLfit error, failing...'
    exit
endif


# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb04.$subj.r*.scale+tlrc.HEAD

# --------------------------------------------------
# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+tlrc"[$ktrs]"
3dTstat -stdev -prefix rm.noise.all errts.${subj}_REML+tlrc"[$ktrs]"
3dcalc -a rm.signal.all+tlrc                                             \
       -b rm.noise.all+tlrc                                              \
       -c full_mask.$subj+tlrc                                           \
       -expr 'c*a/b' -prefix TSNR.$subj 

# ---------------------------------------------------
# compute and store GCOR (global correlation average)
# (sum of squares of global mean of unit errts)
3dTnorm -norm2 -prefix rm.errts.unit errts.${subj}_REML+tlrc
3dmaskave -quiet -mask full_mask.$subj+tlrc rm.errts.unit+tlrc           \
          > mean.errts.unit.1D
3dTstat -sos -prefix - mean.errts.unit.1D\' > out.gcor.1D
echo "-- GCOR = `cat out.gcor.1D`"

# ---------------------------------------------------
# compute correlation volume
# (per voxel: correlation with masked brain average)
3dmaskave -quiet -mask full_mask.$subj+tlrc errts.${subj}_REML+tlrc      \
          > mean.errts.1D
3dTcorr1D -prefix corr_brain errts.${subj}_REML+tlrc mean.errts.1D

# --------------------------------------------------
# extract non-baseline regressors from the X-matrix,
# then compute their sum
1d_tool.py -infile X.nocensor.xmat.1D -write_xstim X.stim.xmat.1D
3dTstat -sum -prefix sum_ideal.1D X.stim.xmat.1D

# ============================ blur estimation =============================
# compute blur estimates
touch blur_est.$subj.1D   # start with empty file

# create directory for ACF curve files
mkdir files_ACF

# -- estimate blur for each run in epits --
touch blur.epits.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded \
                          -show_trs_run $run`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask full_mask.$subj+tlrc                          \
            -ACF files_ACF/out.3dFWHMx.ACF.epits.r$run.1D                \
            all_runs.$subj+tlrc"[$trs]" >> blur.epits.1D
end

# compute average FWHM blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D'{0..$(2)}'\'` )
echo average epits FWHM blurs: $blurs
echo "$blurs   # epits FWHM blur estimates" >> blur_est.$subj.1D

# compute average ACF blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D'{1..$(2)}'\'` )
echo average epits ACF blurs: $blurs
echo "$blurs   # epits ACF blur estimates" >> blur_est.$subj.1D

# -- estimate blur for each run in errts --
touch blur.errts.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded \
                          -show_trs_run $run`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask full_mask.$subj+tlrc                          \
            -ACF files_ACF/out.3dFWHMx.ACF.errts.r$run.1D                \
            errts.${subj}+tlrc"[$trs]" >> blur.errts.1D
end

# compute average FWHM blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.errts.1D'{0..$(2)}'\'` )
echo average errts FWHM blurs: $blurs
echo "$blurs   # errts FWHM blur estimates" >> blur_est.$subj.1D

# compute average ACF blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.errts.1D'{1..$(2)}'\'` )
echo average errts ACF blurs: $blurs
echo "$blurs   # errts ACF blur estimates" >> blur_est.$subj.1D

# -- estimate blur for each run in err_reml --
touch blur.err_reml.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded \
                          -show_trs_run $run`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask full_mask.$subj+tlrc                          \
            -ACF files_ACF/out.3dFWHMx.ACF.err_reml.r$run.1D             \
            errts.${subj}_REML+tlrc"[$trs]" >> blur.err_reml.1D
end

# compute average FWHM blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.err_reml.1D'{0..$(2)}'\'` )
echo average err_reml FWHM blurs: $blurs
echo "$blurs   # err_reml FWHM blur estimates" >> blur_est.$subj.1D

# compute average ACF blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.err_reml.1D'{1..$(2)}'\'` )
echo average err_reml ACF blurs: $blurs
echo "$blurs   # err_reml ACF blur estimates" >> blur_est.$subj.1D


# add 3dClustSim results as attributes to any stats dset
mkdir files_ClustSim

# run Monte Carlo simulations using method 'ACF'
set params = ( `grep ACF blur_est.$subj.1D | tail -n 1` )
3dClustSim -both -mask full_mask.$subj+tlrc -acf $params[1-3]            \
           -cmd 3dClustSim.ACF.cmd -prefix files_ClustSim/ClustSim.ACF

# run 3drefit to attach 3dClustSim results to stats
set cmd = ( `cat 3dClustSim.ACF.cmd` )
$cmd stats.$subj+tlrc stats.${subj}_REML+tlrc


# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj    \
    -dsets pb00.$subj.r*.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 2.0 -exit0 \
    -ss_review_dset out.ss_review.$subj.txt    \
    -write_uvars_json out.ss_review_uvars.json

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -f rm.*

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) then
    ./@ss_review_basic |& tee out.ss_review.$subj.txt

    # generate html ss review pages
    # (akin to static images from running @ss_review_driver)
    apqc_make_tcsh.py -review_style basic -subj_dir . \
        -uvar_json out.ss_review_uvars.json
    tcsh @ss_review_html |& tee out.review_html
    apqc_make_html.py -qc_dir QC_$subj

    echo "\nconsider running: \n\n    afni_open -b $subj.results/QC_$subj/index.html\n"
endif

# return to parent directory (just in case...)
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id                                                                                                                                    \
#     /home/zlzhang/data/言语与认知老化实验/言语与认知老化/analysis/MRI_process/func/afni_proc/example                                     \
#     -script proc.default_subid -scr_overwrite -blocks tshift align tlrc                                                                                  \
#     volreg blur mask scale regress -copy_anat                                                                                                            \
#     /home/zlzhang/data/言语与认知老化实验/言语与认知老化/analysis/MRI_process/func/afni_proc/example/anat/T1W_3D_MPRAGE_1mm_SENSE.nii.gz \
#     -dsets                                                                                                                                               \
#     /home/zlzhang/data/言语与认知老化实验/言语与认知老化/analysis/MRI_process/func/afni_proc/example/func/DDKDT_run1_SENSE.nii.gz        \
#     /home/zlzhang/data/言语与认知老化实验/言语与认知老化/analysis/MRI_process/func/afni_proc/example/func/DDKDT_run2_SENSE.nii.gz        \
#     /home/zlzhang/data/言语与认知老化实验/言语与认知老化/analysis/MRI_process/func/afni_proc/example/func/DDKDT_run3_SENSE.nii.gz        \
#     -tcat_remove_first_trs 0 -align_opts_aea -giant_move -tlrc_base                                                                                      \
#     MNI_avg152T1+tlrc -tlrc_opts_at -init_xform AUTO_CENTER                                                                                              \
#     -volreg_align_to MIN_OUTLIER -volreg_align_e2a -volreg_tlrc_warp                                                                                     \
#     -blur_size 4.0 -regress_stim_times                                                                                                                   \
#     /home/zlzhang/data/言语与认知老化实验/言语与认知老化/analysis/MRI_process/func/afni_proc/example/timing/timing_base.txt              \
#     /home/zlzhang/data/言语与认知老化实验/言语与认知老化/analysis/MRI_process/func/afni_proc/example/timing/timing_dt1.txt               \
#     /home/zlzhang/data/言语与认知老化实验/言语与认知老化/analysis/MRI_process/func/afni_proc/example/timing/timing_dt2.txt               \
#     /home/zlzhang/data/言语与认知老化实验/言语与认知老化/analysis/MRI_process/func/afni_proc/example/timing/timing_dt3.txt               \
#     /home/zlzhang/data/言语与认知老化实验/言语与认知老化/analysis/MRI_process/func/afni_proc/example/timing/timing_dt4.txt               \
#     -regress_stim_labels base dt1 dt2 dt3 dt4 -regress_basis dmBLOCK                                                                                     \
#     -regress_stim_types AM2 -regress_censor_motion 2.0                                                                                                   \
#     -regress_motion_per_run -regress_opts_3dD -jobs 4 -gltsym 'SYM: dt1                                                                                  \
#     -base' -glt_label 1 dt1-base -gltsym 'SYM: dt2 -base' -glt_label 2                                                                                   \
#     dt2-base -gltsym 'SYM: dt1 -dt3' -glt_label 3 dt1-dt3 -gltsym 'SYM: dt2                                                                              \
#     -dt4' -glt_label 4 dt2-dt4 -gltsym 'SYM: dt1 -base -dt3' -glt_label 5                                                                                \
#     dt1-base-dt3 -gltsym 'SYM: dt2 -base -dt4' -glt_label 6 dt2-base-dt4                                                                                 \
#     -gltsym 'SYM: dt1 -dt3 -base' -glt_label 7 dt1-dt3-base -gltsym 'SYM:                                                                                \
#     dt2 -dt4 -base' -glt_label 8 dt2-dt4-base -regress_reml_exec                                                                                         \
#     -regress_make_ideal_sum sum_ideal.1D -regress_est_blur_epits                                                                                         \
#     -regress_est_blur_errts
